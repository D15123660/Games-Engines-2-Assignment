using UnityEngine;

namespace AI
{
    public class SteeringForCollisionAvoidance : Steering
    {
        public bool IsPlannar;
        private Vector3 desiredVelocity;
        private Vehicle vehicle;
        private float maxSpeed;
        private float maxForce;

        //Avoid obstacles to control
        public float AvoidanceForce;

        //The maximum distance you can see forward
        public float MAXSEEAHEAD = 2.0f;

        //An array of all colliders in the scene
        private GameObject[] allColliders;
        
        void Start()
        {
            vehicle = GetComponent<Vehicle>();
            maxSpeed = vehicle.MaxSpeed;
            maxForce = vehicle.MaxForce;
            IsPlannar = vehicle.IsPlannar;

            //If the control force generated by avoiding obstacles is greater than the maximum control force,
            //cut it to the maximum control force
            if (AvoidanceForce > maxForce)
            {
                AvoidanceForce = maxForce;
            }

            //Store all collision bodies in the scene, those game bodies whose Tag is obstacle
            allColliders = GameObject.FindGameObjectsWithTag("obstacle");
        }


        public override Vector3 Force()
        {
            RaycastHit hit;
            Vector3 force = Vector3.zero;
            Vector3 velocity = vehicle.Velocity;
            Vector3 normalizedVelocity = velocity.normalized;

            float dynamicLength = MAXSEEAHEAD * (velocity.magnitude / maxSpeed);

            //To draw a ray, you need to examine the collision body that intersects with this ray
            Debug.DrawLine(transform.position,
                transform.position + normalizedVelocity *dynamicLength );

            if (Physics.Raycast(transform.position, normalizedVelocity, out hit, dynamicLength))
            {
                //If the ray intersects with a collider, it means it may collide with the collider
                Vector3 ahead = transform.position + normalizedVelocity * dynamicLength;

                force = ahead - hit.collider.transform.position;
                force *= AvoidanceForce;

                if (IsPlannar)
                {
                    force.y = 0;
                }

                foreach (var collider in allColliders)
                {
                    if (hit.collider.gameObject == collider)
                    {
                        //May collide
                        collider.GetComponent<Renderer>().material.color = Color.black;
                    }
                    else
                    {
                        collider.GetComponent<Renderer>().material.color = Color.white;
                    }
                }
            }
            else
            {
                //If you look forward within the range, there is no possibility of collision
                foreach (var collider in allColliders)
                {
                    collider.GetComponent<Renderer>().material.color = Color.white;
                }
            }

            return force;
        }

        private void OnDrawGizmos()
        {
            Gizmos.DrawWireSphere(transform.position, MAXSEEAHEAD);
        }
    }
}

